wb = xlsx_package.workbook
xlsx_package.use_autowidth = true
thu = (get_filters(params)['pay_receive'].present? and get_filters(params)['pay_receive'].include?(Erp::Payments::PaymentRecord::TYPE_RECEIVE)) ? 'thu ' : nil
chi = (get_filters(params)['pay_receive'].present? and get_filters(params)['pay_receive'].include?(Erp::Payments::PaymentRecord::TYPE_PAY)) ? 'chi ' : nil
wb.styles do |s|
  wb.styles.fonts.first.name = 'Calibri'
  wb.add_worksheet(name: (thu + chi + 'tiền hàng').capitalize) do |sheet|
    # style
    bg_info = {:bg_color => "00b050", :fg_color => "FF"}
    bg_footer = {:bg_color => "00b050", :fg_color => "FF"}
    bg_row = {:bg_color => "daeef3", :fg_color => "00"}
    text_center = {alignment: { horizontal: :center }}
    text_left = {alignment: { horizontal: :left }}
    text_right = {alignment: { horizontal: :right }}
    vertical_center = {alignment: { vertical: :center }}
    text_middle = {alignment: { horizontal: :center, vertical: :center }}
    text_wrap = { alignment: {wrap_text: true} }
    number = {format_code: '#,##0'}
    border = {border: { style: :thin, color: "525252", :edges => [:left, :right, :bottom] }}
    bold = {b: true}
    italic = {i: true}
    
    # Top head
    sheet.add_row ["Chi nhánh tại Hà Nội - Công ty TNHH Ortho-K Việt Nam"], b: true
    sheet.add_row ["87 Trần Quang Diệu, Phường Quang Trung, Quận Đống Đa, Hà Nội"], b: true
    
    # add empty row
    sheet.add_row [nil]
    
    if @period_name.nil?
      date = "#{'TỪ ' + @from.to_date.strftime('%d/%m/%Y') if !@from.nil?}#{' ĐẾN ' + @to.to_date.strftime('%d/%m/%Y') if !@to.nil?}"
    else
      date = @period_name
    end
    
    sheet.add_row [('BÁO CÁO ' + thu + chi + 'TIỀN HÀNG').upcase], sz: 16, b: true, style: (s.add_style text_center)
    sheet.add_row ["(#{date})"], sz: 12, style: (s.add_style text_center)
    
    # add empty row
    sheet.add_row [nil]
    
    num_row = 6
    
    # header
    header = {columns: [], styles: []}
    footer = {columns: [], styles: []}
    column_widths = []
    
    if get_columns(params).include?("ordinal_number") or get_columns(params).empty?
      header[:columns] << t('.ordinal_number')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).merge(bold))
  
      footer[:columns] << "Tổng cộng"
      footer[:styles] << (s.add_style bg_footer.deep_merge(border).deep_merge(text_middle).deep_merge(bold))
      
      num_col = 0
      column_widths << 5
    end
    if get_columns(params).include?("contact_name") or get_columns(params).empty?
      header[:columns] << t('.contact_name')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))
  
      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 30
    end
    if get_columns(params).include?("voucher_date")
      header[:columns] << t('.voucher_date')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))

      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 15
    end    
    if get_columns(params).include?("pay_receive") or get_columns(params).empty?
      header[:columns] << t('.pay_receive')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))

      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 18
    end
    if get_columns(params).include?("description")
      header[:columns] << t('.description')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))

      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 40
    end
    if get_columns(params).include?("amount") or get_columns(params).empty?
      header[:columns] << t('.amount')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))

      footer[:columns] << @payment_records.remain_amount(from_date: @from, to_date: @to)
      footer[:styles] << (s.add_style bg_footer.deep_merge(vertical_center).deep_merge(border).deep_merge(number).deep_merge(bold))
      
      num_col += 1
      column_widths << 15
      total_merge_col = num_col - 1
    end
    if get_columns(params).include?("account")
      header[:columns] << t('.account')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))

      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 20
    end
    if get_columns(params).include?("salesperson") or get_columns(params).empty?
      header[:columns] << t('.salesperson')
      header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(bold))
  
      footer[:columns] << nil
      footer[:styles] << (s.add_style bg_footer.deep_merge(border))
      
      num_col += 1
      column_widths << 22
    end

    sheet.add_row header[:columns], style: header[:styles], height: 25
    num_row += 1
    
    # rows
    @payment_records.each_with_index do |payment_record, index|
      row = {columns: [], styles: []}
      if get_columns(params).include?("ordinal_number") or get_columns(params).empty?  
        row[:columns] << index+1
        row[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bg_row))
      end
      if get_columns(params).include?("contact_name") or get_columns(params).empty?
        row[:columns] << payment_record.customer_name if payment_record.customer != Erp::Contacts::Contact.get_main_contact
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(border).deep_merge(bg_row))
      end
      if get_columns(params).include?("voucher_date")
        row[:columns] << payment_record.payment_date.strftime('%d/%m/%Y')
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(border).deep_merge(bg_row))
      end
      if get_columns(params).include?("pay_receive") or get_columns(params).empty?
        row[:columns] << t(".#{display_payment_record_type(payment_record)}")
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(border).deep_merge(bg_row))
      end
      if get_columns(params).include?("description")
        row[:columns] << payment_record.description
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(border).deep_merge(text_wrap).deep_merge(bg_row))
      end
      if get_columns(params).include?("amount") or get_columns(params).empty?
        row[:columns] << payment_record.amount
        row[:styles] << (s.add_style text_right.deep_merge(vertical_center).deep_merge(number).merge(border).deep_merge(bg_row))
      end
      if get_columns(params).include?("account")
        row[:columns] << payment_record.account_name
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(border).deep_merge(text_wrap).deep_merge(bg_row))
      end
      if get_columns(params).include?("salesperson") or get_columns(params).empty?
        row[:columns] << payment_record.employee_name
        row[:styles] << (s.add_style text_left.deep_merge(vertical_center).deep_merge(number).merge(border).deep_merge(bg_row))
      end

      sheet.add_row row[:columns], style: row[:styles]
      num_row += 1
    end

    # footer
    sheet.add_row footer[:columns], style: footer[:styles], height: 25
    num_row += 1
    sheet.merge_cells("#{('A'.codepoints.first).chr}#{num_row}:#{('A'.codepoints.first + total_merge_col).chr}#{num_row}")
    
    # setup
    sheet.merge_cells("#{('A'.codepoints.first).chr}4:#{('A'.codepoints.first + num_col).chr}4")
    sheet.merge_cells("#{('A'.codepoints.first).chr}5:#{('A'.codepoints.first + num_col).chr}5")
    
    sheet.column_widths *column_widths
  end
end
