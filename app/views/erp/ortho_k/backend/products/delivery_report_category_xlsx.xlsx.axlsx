wb = xlsx_package.workbook
xlsx_package.use_autowidth = true
wb.styles do |s|
  wb.styles.fonts.first.name = 'Calibri'
  wb.add_worksheet(name: 'XNT - Loại hàng') do |sheet|
    # style
    bg_info = {:bg_color => "305496", :fg_color => "FF"}
    bg_footer = {:bg_color => "ffff00", :fg_color => "c52f24"}
    bg_green_fade = {:bg_color => "e2efda", :fg_color => "00"}
    bg_yellow_fade = {:bg_color => "f3e3a4", :fg_color => "00"}
    bg_toprow = {:bg_color => "dbdbdb", :fg_color => "00"}
    text_gold = {:fg_color => "e87e04"}
    text_blue = {:fg_color => "4b77be"}
    text_center = {alignment: { horizontal: :center }}
    text_left = {alignment: { horizontal: :left }}
    text_right = {alignment: { horizontal: :right }}
    middle_align = {alignment: { vertical: :center }}
    text_middle = {alignment: { horizontal: :center, vertical: :center }}
    wrap = {alignment: {wrap_text: true}}
    number = {format_code: '#,##0'}
    border = {border: { style: :thin, color: "00", :edges => [:top, :right, :bottom, :left] }}
    bold = {b: true}

    if @from_date.present? and @to_date.present?
      if !defined?(@period) or !@period.present?
        date = "(#{'TỪ ' + @from_date.strftime('%d/%m/%Y') if !@from_date.nil?}#{' ĐẾN ' + @to_date.strftime('%d/%m/%Y') if !@to_date.nil?})"
      else
        date = "(#{@period.name})"
      end
    end

    # Top head
    sheet.add_row ["CÔNG TY TNHH ORTHO-K VIỆT NAM"], b: true
    sheet.add_row ["535 An Dương Vương, P.8, Q.5, TP. Hồ Chí Minh"], b: true
    row_num = 2

    # add empty row
    sheet.add_row ['']
    row_num += 1

    # Title 1
    sheet.add_row ['BÁO CÁO XUẤT NHẬP TỒN'], sz: 16, b: true, bg_color: "ffc801", style: (s.add_style text_center)
    row_num += 1

    sheet.add_row [date], sz: 14, bg_color: "ffc801", style: (s.add_style text_center)
    row_num += 1
    
    # add empty row
    sheet.add_row ['']
    row_num += 1
    
    product_ids = @products_query.select('id')
    product_ids = -1 if product_ids.count == 0
    
    footer = {columns: [], styles: []}
    footer[:columns] = []
    
    footer[:columns] << 'Tổng cộng'
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(bg_footer))
    
    begin_params = @global_filters.clone
    begin_params[:to_date] = (@global_filters[:from_date].to_date - 1.day).to_s
    begin_params[:from_date] = nil
    begin_params[:product_id] = product_ids
    footer[:columns] << Erp::Products::Product.get_stock_real(begin_params) # Tong dau ky
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    total_import = 0
    count = Erp::Products::Product.get_qdelivery_import(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
    }))
    total_import += count
    footer[:columns] << count # Nhap NCC
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_qdelivery_import(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
    }))
    total_import += count
    footer[:columns] << count # Hoan kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_transfer_import(@global_filters.merge({
      product_id: product_ids,
    }))
    total_import += count
    footer[:columns] << count # Chuyen kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_cs_return_import(@global_filters.merge({
      product_id: product_ids,
    }))
    total_import += count
    footer[:columns] << count # Nhap tra ky gui
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_stock_check_import(@global_filters.merge({
      product_id: product_ids,
    }))
    count += Erp::Products::Product.get_state_check_import(@global_filters.merge({
      product_id: product_ids,
    }))
    total_import += count
    footer[:columns] << count # Nhap kiem kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_qdelivery_import(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT
    }))
    total_import += count
    footer[:columns] << count # Nhap khac
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    footer[:columns] << total_import # Tong nhap
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer).deep_merge(text_gold))
    
    total_export = 0
    count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
    }))
    total_export += count
    footer[:columns] << count # Xuat ban
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_EXPORT
    }))
    total_export += count
    footer[:columns] << count # Xuat tra NCC
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_consignment_export(@global_filters.merge({
      product_id: product_ids,
    }))
    total_export += count
    footer[:columns] << count # Xuat ky gui
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_transfer_export(@global_filters.merge({
      product_id: product_ids,
    }))
    total_export += count
    footer[:columns] << count # Xuat chuyen kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_gift_given_export(@global_filters.merge({
      product_id: product_ids,
    }))
    total_export += count
    footer[:columns] << count # Xuat tang qua
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_damage_record_export(@global_filters.merge({
      product_id: product_ids,
    }))
    total_export += count
    footer[:columns] << count # Xuat huy kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_stock_check_export(@global_filters.merge({
      product_id: product_ids,
    }))
    count += Erp::Products::Product.get_state_check_import(@global_filters.merge({
      product_id: product_ids,
    }))
    total_export += count
    footer[:columns] << count # Xuat kiem kho
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
      product_id: product_ids,
      delivery_type: Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT
    }))
    total_export += count
    footer[:columns] << count # Xuat khac
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    footer[:columns] << total_export # Tong xuat
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer).deep_merge(text_blue))
    
    end_params = @global_filters.clone
    end_params[:from_date] = nil
    end_params[:product_id] = product_ids
    footer[:columns] << Erp::Products::Product.get_stock_real(end_params) # Tong cuoi ky
    footer[:styles] << (s.add_style text_middle.deep_merge(border).deep_merge(bold).deep_merge(number).deep_merge(bg_footer))
    
    sheet.add_row footer[:columns], style: footer[:styles]
    row_num += 1
    footer_row_num = row_num

    # header
    header = {columns: [], styles: []}
    subheader = {columns: [], styles: []}
    
    header_row_num = row_num + 1
    subheader_row_num = header_row_num + 1
    column_widths = []
    col_num = (-1)
    
    header[:columns] << "Loại mặt hàng"
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 30
    sheet.merge_cells("#{('A'.codepoints.first + col_num).chr}#{header_row_num}:#{('A'.codepoints.first + col_num).chr}#{subheader_row_num}")
    
    header[:columns] << "Đầu kỳ"
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    sheet.merge_cells("#{('A'.codepoints.first + col_num).chr}#{header_row_num}:#{('A'.codepoints.first + col_num).chr}#{subheader_row_num}")
    
    header[:columns] << "Nhập kho"
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Nhập NCC'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    first_col_nhap_kho = col_num
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Hoàn kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Chuyển kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Trả K.gửi'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Kiểm kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Khác'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Tổng'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    last_col_nhap_kho = col_num
    
    sheet.merge_cells("#{('A'.codepoints.first+ first_col_nhap_kho).chr}#{header_row_num}:#{('A'.codepoints.first+ last_col_nhap_kho).chr}#{header_row_num}")
    
    # ==========================
    
    header[:columns] << 'Xuất kho'
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Xuất bán'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    first_col_xuat_kho = col_num
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Trả NCC'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Ký gửi'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Chuyển kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Tặng quà'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Hủy kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Kiểm kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Khác'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    
    header[:columns] << nil
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << 'Tổng'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    last_col_xuat_kho = col_num
    sheet.merge_cells("#{('A'.codepoints.first+ first_col_xuat_kho).chr}#{header_row_num}:#{('A'.codepoints.first+ last_col_xuat_kho).chr}#{header_row_num}")
    
    header[:columns] << 'Cuối kỳ'
    header[:styles] << (s.add_style bg_info.deep_merge(text_middle).deep_merge(border).merge(bold))
    subheader[:columns] << nil
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    column_widths << 10
    sheet.merge_cells("#{('A'.codepoints.first + col_num).chr}#{header_row_num}:#{('A'.codepoints.first + col_num).chr}#{subheader_row_num}")
    
    sheet.add_row header[:columns], style: header[:styles]
    row_num += 1
    sheet.add_row subheader[:columns], style: subheader[:styles]
    row_num += 1
    
    @categories.each_with_index do |category,index|
      row = {columns: [], styles: []}
      
      product_ids = Erp::Products::Product.select('id').where("erp_products_products.category_id = ?", category.id)
      product_ids = -1 if product_ids.count == 0
      
      row[:columns] << category.name
      row[:styles] << (s.add_style border.deep_merge(text_left))
      
      # ----- Dau ky
      begin_params = @global_filters.clone
      begin_params[:to_date] = (@global_filters[:from_date].to_date - 1.day).to_s
      begin_params[:from_date] = nil
      begin_params[:product_id] = product_ids
      row[:columns] << Erp::Products::Product.get_stock_real(begin_params)
      row[:styles] << (s.add_style border.deep_merge(text_center).deep_merge(bg_yellow_fade).deep_merge(bold))
      
      # ====Nhap====
      # ----- Nhap NCC
      total_import = 0
      filters = @global_filters.clone
      count = Erp::Products::Product.get_qdelivery_import(filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Hoan kho
      filters = @global_filters.clone
      count = Erp::Products::Product.get_qdelivery_import(filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Chuyen kho
      count = Erp::Products::Product.get_transfer_import(@global_filters.merge({
        product_id: product_ids,
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Tra ky gui
      count = Erp::Products::Product.get_cs_return_import(@global_filters.merge({
        product_id: product_ids,
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Kiem kho (S.luong, Tr.thai)
      count = Erp::Products::Product.get_stock_check_import(@global_filters.merge({
        product_id: product_ids,
      }))
      count += Erp::Products::Product.get_state_check_import(@global_filters.merge({
        product_id: product_ids,
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Nhap khac
      filters = @global_filters.clone
      count = Erp::Products::Product.get_qdelivery_import(filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Tong nhap
      row[:columns] << total_import
      row[:styles] << (s.add_style border.deep_merge(text_center).deep_merge(bold).deep_merge(text_gold))
      
      # ====Xuat====
      # ----- Xuat ban
      total_export = 0
      count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat tra NCC
      count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_EXPORT
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat ky gui
      count = Erp::Products::Product.get_consignment_export(@global_filters.merge({
        product_id: product_ids
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat chuyen kho
      count = Erp::Products::Product.get_transfer_export(@global_filters.merge({
        product_id: product_ids,
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat tang qua
      count = Erp::Products::Product.get_gift_given_export(@global_filters.merge({
        product_id: product_ids,
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat huy kho
      count = Erp::Products::Product.get_damage_record_export(@global_filters.merge({
        product_id: product_ids,
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat kiem kho
      count = Erp::Products::Product.get_stock_check_export(@global_filters.merge({
        product_id: product_ids,
      }))
      count += Erp::Products::Product.get_state_check_export(@global_filters.merge({
        product_id: product_ids,
      }))
      total_export += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Xuat khac
      count = Erp::Products::Product.get_qdelivery_export(@global_filters.merge({
        product_id: product_ids,
        delivery_type: Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT
      }))
      total_import += count
      row[:columns] << count
      row[:styles] << (s.add_style border.deep_merge(text_center))
      
      # ----- Tong xuat
      row[:columns] << total_export
      row[:styles] << (s.add_style border.deep_merge(text_center).deep_merge(text_gold).deep_merge(text_blue))
      
      # ----- Cuoi ky
      end_params = @global_filters.clone
      end_params[:from_date] = nil
      end_params[:product_id] = product_ids
      row[:columns] << Erp::Products::Product.get_stock_real(end_params)
      row[:styles] << (s.add_style border.deep_merge(text_center).deep_merge(bg_green_fade).deep_merge(bold))
      
      sheet.add_row row[:columns], style: row[:styles]
    end

    # Setup
    sheet.column_widths *column_widths
    
    sheet.merge_cells("#{('A'.codepoints.first).chr}4:#{('A'.codepoints.first + col_num).chr}4")
    sheet.merge_cells("#{('A'.codepoints.first).chr}5:#{('A'.codepoints.first + col_num).chr}5")
  end
end
