wb = xlsx_package.workbook
xlsx_package.use_autowidth = true
wb.styles do |s|
  wb.styles.fonts.first.name = 'Calibri'
  wb.add_worksheet(name: 'Tồn kho vùng tùy chọn') do |sheet|
    # style
    bg_info = {:bg_color => "305496", :fg_color => "FF"}
    bg_subrow = {:bg_color => "dbdbdb", :fg_color => "00"}
    bg_toprow = {:bg_color => "dbdbdb", :fg_color => "00"}
    text_center = {alignment: { horizontal: :center }}
    text_left = {alignment: { horizontal: :left }}
    text_right = {alignment: { horizontal: :right }}
    middle_align = {alignment: { vertical: :center }}
    wrap = {alignment: {wrap_text: true}}
    number = {format_code: '#,##0'}
    border = {border: { style: :thin, color: "00", :edges => [:top, :right, :bottom, :left] }}
    bold = {b: true}

    if @from_date.present? or @to_date.present?
      if !defined?(@period)
        date = "(#{'TỪ ' + @from_date.strftime('%d/%m/%Y') if !@from_date.nil?}#{' ĐẾN ' + @to_date.strftime('%d/%m/%Y') if !@to_date.nil?})"
      else
        date = "(#{@period.name})"
      end
    else
      date = "(TÍNH ĐẾN #{Time.now.strftime('%d/%m/%Y')})"
    end

    # Top head
    sheet.add_row ["CÔNG TY TNHH ORTHO-K VIỆT NAM"], b: true
    sheet.add_row ["535 An Dương Vương, P.8, Q.5, TP. Hồ Chí Minh"], b: true
    row_num = 2

    # add empty row
    sheet.add_row ['']
    row_num += 1

    # Title 1
    sheet.add_row ['THỐNG KÊ TỒN KHO THEO VÙNG TÙY CHỌN'], sz: 16, b: true, bg_color: "ffc801", style: (s.add_style text_center)
    row_num += 1

    sheet.add_row [date], sz: 14, bg_color: "ffc801", style: (s.add_style text_center)
    row_num += 1

    sheet.add_row ['Kho:',
      (@global_filters[:warehouse_ids].present? ? Erp::Warehouses::Warehouse.where(id: @global_filters[:warehouse_ids]).map(&:name).join(', ') : 'Tất cả')],
      style: [(s.add_style text_left), (s.add_style text_left.deep_merge(bold))]
    row_num += 1

    sheet.add_row ['Tình trạng:',
      (@global_filters[:state_ids].present? ? Erp::Warehouses::Warehouse.where(id: @global_filters[:state_ids]).map(&:name).join(', ') : 'Tất cả')],
      style: [(s.add_style text_left), (s.add_style text_left.deep_merge(bold))]
    row_num += 1

    # add empty row
    sheet.add_row ['']
    row_num += 1

    # header
    header = {columns: [], styles: []}
    subheader = {columns: [], styles: []}
    header[:columns] = []

    header_row_num = row_num + 1
    subheader_row_num = header_row_num + 1

    header[:columns] << "Loại hàng"
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num = 0
    sheet.merge_cells("#{('A'.codepoints.first + col_num).chr}#{header_row_num}:#{('A'.codepoints.first + col_num).chr}#{subheader_row_num}")
    loaihang_col_num = col_num

    header[:columns] << "Chữ"
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    sheet.merge_cells("#{('A'.codepoints.first + col_num).chr}#{header_row_num}:#{('A'.codepoints.first + col_num).chr}#{subheader_row_num}")

    header[:columns] << "Số"
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    sheet.merge_cells("#{('A'.codepoints.first+ col_num).chr}#{header_row_num}:#{('A'.codepoints.first+ col_num).chr}#{subheader_row_num}")

    header[:columns] << 'Đường kính'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    sheet.merge_cells("#{('A'.codepoints.first+ col_num).chr}#{header_row_num}:#{('A'.codepoints.first+ col_num).chr}#{subheader_row_num}")
    duongkinh_col_num = col_num

    header[:columns] << "Dư đầu"
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    sheet.merge_cells("#{('A'.codepoints.first+ col_num).chr}#{header_row_num}:#{('A'.codepoints.first+ col_num).chr}#{subheader_row_num}")

    header[:columns] << 'Nhập kho'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Mua hàng'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    nhap_first = col_num

    header[:columns] << ''
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Kiểm kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1

    header[:columns] << ''
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Ktra tr.thái'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    nhap_last = col_num
    sheet.merge_cells("#{('A'.codepoints.first+ nhap_first).chr}#{header_row_num}:#{('A'.codepoints.first+ nhap_last).chr}#{header_row_num}")

    hoankho_first = 0
    hoankho_last = 0
    @states.each_with_index do |state,index|
      header[:columns] << (index == 0 ? 'Hoàn kho' : '')
      header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
      subheader[:columns] << state.name
      subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
      col_num += 1
      if index == 0
        hoankho_first = col_num
      end
      if index == (@states.count - 1)
        hoankho_last = col_num
      end
    end
    sheet.merge_cells("#{('A'.codepoints.first + hoankho_first).chr}#{header_row_num}:#{('A'.codepoints.first + hoankho_last).chr}#{header_row_num}")

    header[:columns] << 'Xuất kho'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Bán hàng'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    xuat_first = col_num

    header[:columns] << ''
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Kiểm kho'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1

    header[:columns] << ''
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << 'Ktra tr.thái'
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    xuat_last = col_num
    sheet.merge_cells("#{('A'.codepoints.first + xuat_first).chr}#{header_row_num}:#{('A'.codepoints.first + xuat_last).chr}#{header_row_num}")

    header[:columns] << 'Dư cuối'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(border).merge(bold))
    col_num += 1
    sheet.merge_cells("#{('A'.codepoints.first+ col_num).chr}#{header_row_num}:#{('A'.codepoints.first+ col_num).chr}#{subheader_row_num}")

    last_col_num = col_num

    sheet.add_row header[:columns], style: header[:styles]
    row_num += 1
    sheet.add_row subheader[:columns], style: subheader[:styles]
    row_num += 1

    # rows
    #line = 5
    counts = {}
    @rows.each_with_index do |rw, index|
      counts[rw[:category].name] = {}
      rw[:letter_groups].each_with_index do |lg,index2|
        lg[:numbers_diameters].each_with_index do |nd,index3|

          query = @product_query
          # filter by properties
          [nd[:diameter_ids], lg[:letter_ids], nd[:number_ids]].each do |ids|
              if ids.present?
                if !ids.kind_of?(Array)
                  query = query.where("erp_products_products.cache_properties LIKE '%[\"#{ids}\",%'")
                else
                  ids = (ids.reject { |c| c.empty? })
                  if !ids.empty?
                    qs = []
                    ids.each do |x|
                      qs << "(erp_products_products.cache_properties LIKE '%[\"#{x}\",%')"
                    end
                    query = query.where("(#{qs.join(" OR ")})")
                  end
                end
              end
          end

          product_ids = query.select('id').where(category_id: rw[:category].id)

          product_ids = -1 if product_ids.count == 0
          filters = @global_filters.clone.merge({product_id: product_ids})

          # Add rows
          row = {columns: [], styles: []}
          row[:columns] = []

          row[:columns] << (rw[:category].name if index2 == 0 and index3 == 0)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))


          values = Erp::Products::PropertiesValue.where(id: lg[:letter_ids]).map(&:value)
          row[:columns] << ("#{values.first} đến #{values.last}" if index3 == 0)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

          values = Erp::Products::PropertiesValue.where(id: nd[:number_ids]).map(&:value)
          row[:columns] << "#{values.first} đến #{values.last}"
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          values = Erp::Products::PropertiesValue.where(id: nd[:diameter_ids]).map(&:value)
          row[:columns] << "#{values.first} đến #{values.last}"
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          begin_params = filters.clone
          begin_params[:to_date] = filters[:from_date]
          begin_params[:from_date] = nil
          row[:columns] << (counts[rw[:category].name][0] = counts[rw[:category].name][0].to_i + Erp::Products::Product.get_stock_real(begin_params))
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

          count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
              delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
          }))
          row[:columns] << (counts[rw[:category].name][1] = counts[rw[:category].name][1].to_i + count)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          count = Erp::Products::Product.get_stock_check_import(filters)
          row[:columns] << (counts[rw[:category].name][2] = counts[rw[:category].name][2].to_i + count)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          count = (filters[:state_ids].present? ? Erp::Products::Product.get_state_check_import(filters) : '--')
          if filters[:state_ids].present?
            row[:columns] << (counts[rw[:category].name][8] = counts[rw[:category].name][8].to_i + count)
          else
            row[:columns] << (count)
          end
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          counts[rw[:category].name][3] = {}
          @states.each do |state|
            count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
              delivery_type: [
                Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT,
                Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
              ],
              state: state
            }))
            row[:columns] << (counts[rw[:category].name][3][state.id] = count)
            row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))
          end

          count = Erp::Products::Product.get_qdelivery_export(filters.clone.merge({
            delivery_type: [
              Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT,
              Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
            ]
          }))
          count += Erp::Products::Product.get_gift_given_export(filters)
          row[:columns] << (counts[rw[:category].name][4] = counts[rw[:category].name][4].to_i + count)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          count = Erp::Products::Product.get_damage_record_export(filters)
          count += Erp::Products::Product.get_stock_check_export(filters)
          row[:columns] << (counts[rw[:category].name][5] = counts[rw[:category].name][5].to_i + count)
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          count = (filters[:state_ids].present? ? Erp::Products::Product.get_state_check_export(filters) : '--')
          if filters[:state_ids].present?
            row[:columns] << (counts[rw[:category].name][6] = counts[rw[:category].name][6].to_i + count)
          else
            row[:columns] << (count)
          end
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap))

          end_params = filters.clone
          end_params[:from_date] = nil
          row[:columns] << (counts[rw[:category].name][7] = counts[rw[:category].name][7].to_i + Erp::Products::Product.get_stock_real(end_params))
          row[:styles] << (s.add_style text_center.deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

          sheet.add_row row[:columns], style: row[:styles]
          row_num += 1
        end
      end

      query = @product_query
      product_ids = query.select('id').where(category_id: rw[:category].id)

      product_ids = -1 if product_ids.count == 0
      filters = @global_filters.clone.merge({product_id: product_ids})

      # Add sub-rows
      subrow = {columns: [], styles: []}
      subrow[:columns] = []

      subrow[:columns] << 'Tổng cộng'
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << ''
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(border))

      subrow[:columns] << ''
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(border))

      subrow[:columns] << ''
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(border))

      subrow[:columns] << counts[rw[:category].name][0]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][1]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][2]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][8]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      @states.each do |state|
        subrow[:columns] << counts[rw[:category].name][3][state.id]
        subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))
      end

      subrow[:columns] << counts[rw[:category].name][4]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][5]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][6]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      subrow[:columns] << counts[rw[:category].name][7]
      subrow[:styles] << (s.add_style bg_subrow.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).deep_merge(wrap).deep_merge(bold))

      sheet.add_row subrow[:columns], style: subrow[:styles]
      row_num += 1
      sheet.merge_cells("#{('A'.codepoints.first+ loaihang_col_num).chr}#{row_num}:#{('A'.codepoints.first+ duongkinh_col_num).chr}#{row_num}")
    end
    row_num += 1

    # Setup
    sheet.column_widths 15, 10, 10, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
    sheet.merge_cells("A2:F2")
    sheet.merge_cells("#{('A'.codepoints.first).chr}4:#{('A'.codepoints.first+ last_col_num).chr}4")
    sheet.merge_cells("#{('A'.codepoints.first).chr}5:#{('A'.codepoints.first+ last_col_num).chr}5")
  end
end
