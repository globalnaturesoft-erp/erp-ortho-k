wb = xlsx_package.workbook
xlsx_package.use_autowidth = true
wb.styles do |s|
  wb.styles.fonts.first.name = 'Times New Roman'
  wb.add_worksheet(name: 'Thống kê tồn kho') do |sheet|
    # style
    bg_info = {:bg_color => "305496", :fg_color => "FF"}
    bg_subrow = {:bg_color => "dbdbdb", :fg_color => "3a3838"}
    bg_toprow = {:bg_color => "dbdbdb", :fg_color => "00"}
    text_center = {alignment: { horizontal: :center }}
    text_left = {alignment: { horizontal: :left }}
    text_right = {alignment: { horizontal: :right }}
    middle_align = {alignment: { vertical: :center }}
    number = {format_code: '#,##0'}
    border = {border: { style: :thin, color: "00", :edges => [:top, :right, :bottom, :left] }}
    bold = {b: true}
    if (!@from_date.nil? and !@to_date.nil?) and (@from_date.to_date == @to_date.to_date)
      date = "#{' NGÀY ' + @from_date.to_date.strftime('%d/%m/%Y')}"
    else
      date = "#{' TỪ ' + @from_date.to_date.strftime('%d/%m/%Y') if !@from_date.nil?}#{' ĐẾN ' + @to_date.to_date.strftime('%d/%m/%Y') if !@to_date.nil?}"
    end
    
    # add empty row
    sheet.add_row ['']
    
    # Title 1
    sheet.add_row ['THỐNG KÊ TỒN KHO' + date], sz: 16, b: true, bg_color: "ffc801", style: (s.add_style text_center)
    
    # add empty row
    sheet.add_row ['']
    
    product_ids = @product_query.select('id')
    product_ids = -1 if product_ids.count == 0
    filters = @global_filters.clone.merge({product_id: product_ids})
    
    begin_params = filters.clone
    begin_params[:to_date] = filters[:from_date]
    begin_params[:from_date] = nil
    
    toprow = {columns: [], styles: []}
    toprow[:columns] << 'TỔNG CỘNG'
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    toprow[:columns] << ''
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    toprow[:columns] << Erp::Products::Product.get_stock_real(begin_params)
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
          delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
      }))
    toprow[:columns] << count
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    Erp::Products::State.all.each do |state|
      count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
          delivery_type: [
            Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT,
            Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
          ],
          state: state
      }))
      
      toprow[:columns] << count
      toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    end
    
    count = Erp::Products::Product.get_qdelivery_export(filters.clone.merge({
        delivery_type: [
          Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT,
          Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
        ]
    }))
    count += Erp::Products::Product.get_gift_given_export(filters)
    toprow[:columns] << count
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    count = Erp::Products::Product.get_damage_record_export(filters)
    count += Erp::Products::Product.get_stock_check_export(filters)
    toprow[:columns] << count
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    end_params = filters.clone
    end_params[:from_date] = nil
    toprow[:columns] << Erp::Products::Product.get_stock_real(end_params)
    toprow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_toprow).deep_merge(bold))
    
    sheet.add_row toprow[:columns], style: toprow[:styles]
    
    # header
    header = {columns: [], styles: []}
    subheader = {columns: [], styles: []}
    header[:columns] = []
    
    header[:columns] << 'Loại hàng'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt = 0
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    header[:columns] << 'Đường kính'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    header[:columns] << 'Dư đầu'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    header[:columns] << 'Nhập NCC'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    Erp::Products::State.all.each_with_index do |state,index|
      header[:columns] << (index==0 ? 'Hoàn kho' : '')
      header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
      subheader[:columns] << state.name
      subheader[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
      kt += 1
    end
    sheet.merge_cells("#{('A'.codepoints.first + (kt-(Erp::Products::State.all.count-1))).chr}5:#{('A'.codepoints.first + kt).chr}5")
    
    header[:columns] << 'Xuất'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    header[:columns] << 'Hư/Mất'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    header[:columns] << 'Dư cuối'
    header[:styles] << (s.add_style bg_info.deep_merge(text_center).deep_merge(middle_align).deep_merge(border).merge(bold))
    subheader[:columns] << ''
    subheader[:styles] << (s.add_style bg_info.deep_merge(text_right).deep_merge(border).merge(bold))
    kt += 1
    sheet.merge_cells("#{('A'.codepoints.first + kt).chr}5:#{('A'.codepoints.first + kt).chr}6")
    
    sheet.add_row header[:columns], style: header[:styles]
    sheet.add_row subheader[:columns], style: subheader[:styles]
    
    # rows
    cat_line2 = 6
    @categories.each_with_index do |category,category_index|
      cat_line1 = cat_line2 + 1
      @diameters.each_with_index do |diameter,diameter_index|
        row = {columns: [], styles: []}
        row[:columns] = []
        
        product_ids = @product_query.select('id').where(category_id: category.id).where("erp_products_products.cache_properties LIKE '%[\"#{diameter.id}\",%'")
        product_ids = -1 if product_ids.count == 0
        filters = @global_filters.clone.merge(product_id: product_ids)
        
        row[:columns] << (diameter_index == 0 ? category.name : '')
        row[:styles] << (s.add_style text_left.deep_merge(border).deep_merge(middle_align))
        
        row[:columns] << diameter.value
        row[:styles] << (s.add_style text_center.deep_merge(border))
        cat_line2 += 1
        
        begin_params = filters.clone
        begin_params[:to_date] = filters[:from_date]
        begin_params[:from_date] = nil
        row[:columns] << Erp::Products::Product.get_stock_real(begin_params)
        row[:styles] << (s.add_style text_center.deep_merge(border))
        
        count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
            delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
        }))
        row[:columns] << count
        row[:styles] << (s.add_style text_center.deep_merge(border))
        
        Erp::Products::State.all.each do |state|
          count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
              delivery_type: [
                Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT,
                Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
              ],
              state: state
          }))
          row[:columns] << count
          row[:styles] << (s.add_style text_center.deep_merge(number).deep_merge(border))
        end
        
        count = Erp::Products::Product.get_qdelivery_export(filters.clone.merge({
            delivery_type: [
              Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT,
              Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
            ]
        }))
        count += Erp::Products::Product.get_gift_given_export(filters)
        row[:columns] << count
        row[:styles] << (s.add_style text_center.deep_merge(border))
        
        count = Erp::Products::Product.get_damage_record_export(filters)
        count += Erp::Products::Product.get_stock_check_export(filters)
        row[:columns] << count
        row[:styles] << (s.add_style text_center.deep_merge(border))
        
        end_params = filters.clone
        end_params[:from_date] = nil
        row[:columns] << Erp::Products::Product.get_stock_real(end_params)
        row[:styles] << (s.add_style text_center.deep_merge(border))
        
        sheet.add_row row[:columns], style: row[:styles]
      end
      subrow = {columns: [], styles: []}
      
      product_ids = @product_query.select('id').where(category_id: category.id)
      product_ids = -1 if product_ids.count == 0
      filters = @global_filters.clone.merge({product_id: product_ids})
      
      subrow[:columns] << ''
      subrow[:styles] << (s.add_style text_right.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      subrow[:columns] << 'Tổng cộng'
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      begin_params = filters.clone
      begin_params[:to_date] = filters[:from_date]
      begin_params[:from_date] = nil
      subrow[:columns] << Erp::Products::Product.get_stock_real(begin_params)
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
          delivery_type: Erp::Qdeliveries::Delivery::TYPE_PURCHASE_IMPORT
      }))
      subrow[:columns] << count
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      Erp::Products::State.all.each do |state|
        count = Erp::Products::Product.get_qdelivery_import(filters.clone.merge({
            delivery_type: [
              Erp::Qdeliveries::Delivery::TYPE_CUSTOM_IMPORT,
              Erp::Qdeliveries::Delivery::TYPE_SALES_IMPORT
            ],
            state: state
        }))
        subrow[:columns] << count
        subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      end
      
      count = Erp::Products::Product.get_qdelivery_export(filters.clone.merge({
          delivery_type: [
            Erp::Qdeliveries::Delivery::TYPE_CUSTOM_EXPORT,
            Erp::Qdeliveries::Delivery::TYPE_SALES_EXPORT
          ]
      }))
      count += Erp::Products::Product.get_gift_given_export(filters)
      subrow[:columns] << count
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      count = Erp::Products::Product.get_damage_record_export(filters)
      count += Erp::Products::Product.get_stock_check_export(filters)
      subrow[:columns] << count
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      end_params = filters.clone
      end_params[:from_date] = nil
      subrow[:columns] << Erp::Products::Product.get_stock_real(end_params)
      subrow[:styles] << (s.add_style text_center.deep_merge(border).deep_merge(bg_subrow).merge(bold))
      
      sheet.add_row subrow[:columns], style: subrow[:styles]
      cat_line2 += 1
      sheet.merge_cells("A#{cat_line1}:A#{cat_line2}")
    end
    
    # Setup
    sheet.column_widths 20, 20, 15, 15, 15, 15, 15, 15, 15
    sheet.merge_cells("A2:K2")
    sheet.merge_cells("A4:B4")
  end
end
